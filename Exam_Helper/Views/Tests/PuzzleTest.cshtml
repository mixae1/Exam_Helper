@using Exam_Helper.ViewsModel
@model Exam_Helper.ViewsModel.TestParent
@{
    ViewData["Title"] = "View";
    var Temp_Model = Model as TestInfoPuzzle;
}

<head>

</head>
<main>
    <div>

        @{int num_ans = 0; int num = 0; }

        @if (Temp_Model.IsSuccessed)
        {
            <div class="droppable-elems">

                @foreach (var block in Temp_Model.TestStrings)
                {
                    <div class="mt-2" id="@("droppable" + num_ans.ToString())">
                    </div>
                    num_ans++;
                }
            </div>

            <div class="draggable-elems">
                @foreach (var block in Temp_Model.TestStrings)
                {
                    <div class="mt-auto flex-nowrap">
                        <div class="p-0 " id="@("draggable" + @num.ToString())">
                            <div class="border border-info text-center" style="padding-left:0px ; padding-right:0px;">@block</div>
                        </div>
                    </div>

                    num++;
                }
            </div>

            <div class="form-group mt-3">
                <input type="submit" value="Проверить ответ" class="btn btn-primary" id="CheckAnswers" />
            </div>
        }
        else
        {
            <p>Мы не можем создать данный тест для этого вопроса.</p>
        }
        <a asp-controller="PublicLibrary" asp-action="Index">
            <input type="button" value="Вернуться в библиотеку" class="btn btn-primary" />
        </a>
    </div>
</main>

<script>

    $("#CheckAnswers").click(function CheckAnswers() {
        var ans = [];
         @for(int i = 0; i< Temp_Model.RightIndexes.Length; i++)
        {
            @:ans.push("@(new Microsoft.AspNetCore.Html.HtmlString(Temp_Model.RightIndexes[i].ToString()))");
        }


        $("[id^=droppable]").each(function (index, elem) {
            var id_elem = $(elem).children("[id^=draggable]");
            console.log('id is ' + $(id_elem).attr("id"));
            if ($(id_elem).attr("id") === ('draggable' + ans[index])) {
                $(this).removeClass("wrong");
                $(this).addClass("right");
            }
            else {
                $(this).removeClass("right");
                $(this).addClass("wrong");
            }
        });
    });

    $(function () {

        $("[id^=draggable]").draggable({ revert: true });

        $("[id^=droppable]").droppable({
            over: function (event, ui) {
                if ($(this).children("[id^=draggable]").attr("id") == undefined)
                $(this).addClass('hover');
            },
            out: function (event, ui) {
                $(this).removeClass('hover');
                $(this).position = 'absolute';
             
            },
            drop: function (event, ui) {
                console.log($(this).children("[id^=draggable]"));
                if ($(this).children("[id^=draggable]").attr("id") == undefined) {

                    // измененяем размеры контейнеров (ширину и высоту )первые 2 строки - меняем контейнер в которых кидаем , последние 2 строки - меняем контейнер который переносим
                    // $(this).css('height', ui.draggable.css('height'));
                      $(this).css('width', ui.draggable.css('width'));
                      ui.draggable.css('height', $(this).css('height'));
                    //ui.draggable.css('width', $(this).css('width'));
                    $(this).append(ui.draggable);
                    $(this).removeClass('hover');
                }
                
            }
            
        });
    });



</script>

<style>
    .right {
        background-color: green;
    }

    .wrong {
        background-color: red;
    }

    .hover {
        border-style: double;
        border-color: black;
    }

    .droppable-elems {
        display: inline-block;
    }

    .draggable-elems {
        display: inline-block;
    }

    .mt-2  {
        float: left;
        width: 450px;
        height: 30px;
        float: left;
        margin: 2px;
        border-bottom-style: double;
        border-bottom-color: black;
    }
</style>


@section Scripts {

    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}