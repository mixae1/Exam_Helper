@using Exam_Helper.ViewsModel
@model Exam_Helper.ViewsModel.TestParent;
@{
    ViewData["Title"] = "View";
    var Temp_Model = Model as TestInfoTheWrongText;
}

<head>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
</head>



<main style="margin-top: 25vh;" class="container d-flex align-items-center test-page">
    <div>
        <h2>@Temp_Model.Title</h2>
        @if (Temp_Model.IsSuccessed)
        {
            <div class="wrong-text p-3" style="white-space:pre-wrap;">
                <span style="white-space:pre-wrap;">@Html.Raw(Temp_Model.Text)</span>
            </div>
            <div class="form-group mt-3">
                <input type="submit" value="Проверить ответ" class="btn btn-lib" id="CheckAnswers" />
            </div>
        }
        else
        {
            <h5>Исправление ошибок.</h5>
            <div class="container" style="margin-top: 3vh">
                <p>Мы не можем создать данный тест для этого вопроса.</p>
            </div>
        }
        <a asp-controller=@Temp_Model.ReturnControllerName asp-action="Index">
            <input type="button" value="Вернуться в библиотеку" class="btn btn-lib" />
        </a>

        <a asp-controller="@Temp_Model.ControllerName" asp-action="Index">
            <input type="button" value="Вернуться к выбору метода тестирования" class="btn btn-lib" />
        </a>


        @if (Temp_Model.isMulti)
            @Html.ActionLink("Cледующее задание", "MultiTesting", (Temp_Model.ControllerName), new { Instruction = "" }, new { @type = "button", @class = "btn btn-lib" + (Temp_Model.IsSuccessed ? " isDisabled" : ""), id = "nextTask" })

        @if (Temp_Model.IsSuccessed && !Temp_Model.isMulti)
        {
            @Html.ActionLink("Пройти еще раз", "TheWrongTextTest", "Tests", new { Instruction = Temp_Model.TestInstructions }, new { @type = "button", @class = "btn btn-lib" })
            <button class="btn btn-lib" type="button" data-toggle="modal" data-target="#parts-modal">
                Подсказка
            </button>
            <div class="modal fade" id="parts-modal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h4 class="modal-title">Подсказка</h4>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <div class="modal-hint" style="white-space:pre-wrap;">
                                @Model.Hint
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }

    </div>
</main>

<script>
    $(".wrong-text").children().children().click(function (event){
        console.log(event.target);
        if ($(event.target).hasClass("wr-label")){
            $(event.target).css("color", "green");
            $(event.target).text($(event.target).attr("data-answer"));
        }
        else{
            $(event.target).css("color", "red");
            setTimeout(function (){
                $(".wrong-text").children().children().each(function (id,el){
                    if(!$(el).hasClass("wr-label")){
                        $(el).css("color", "black");
                    }
                })
            }, 5000)
        }
    })

    $("#CheckAnswers").click(function CheckAnswers() {

        $('#nextTask').removeClass('isDisabled');

        correctAns = 0;
        all = 0;

        $('.wr-label').each(function (item,obj)
        {
            if (obj.style.color == "green") correctAns++;
            else obj.style.color="red";
            all++;
        })



        var testIsFinished = localStorage.getItem('testfinished');
        if (testIsFinished == 'f') {
            let dataMethod = localStorage.getItem('userStats/Wrong');
            if (dataMethod === null) dataMethod = "0;0";
            let data = dataMethod.split(';');
            data[0] = (parseInt(data[0]) + correctAns).toString();
            data[1] = (parseInt(data[1]) + all).toString();

           // console.log(data);

            localStorage.setItem('userStats/Wrong', data[0] + ';' + data[1]);
        }

    });

</script>

<style>
    .isDisabled {
        color: currentColor;
        cursor: not-allowed;
        opacity: 0.5;
        text-decoration: none;
        pointer-events: none;
    }
    .wrong-text{
        border: 2px solid black;
        border-radius: 5px;
    }
    .right {
        border-color: green;
    }

    .wrong {
        border-color: red;
    }

    .editablesection {
        background-color: #ffffff;
        display: inline-block;
        padding: 0;
        outline-offset: 0;
        height: 1.2em;
        font: inherit;
        margin: 0;
        box-sizing: inherit;
    }
</style>


@section Scripts {

    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}